<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Malware | CCI]]></title>
  <link href="http://TakahiroHaruyama.github.io/blog/categories/malware/atom.xml" rel="self"/>
  <link href="http://TakahiroHaruyama.github.io/"/>
  <updated>2015-12-04T15:39:04+09:00</updated>
  <id>http://TakahiroHaruyama.github.io/</id>
  <author>
    <name><![CDATA[Takahiro Haruyama (@cci_forensics)]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Presentation at SECURE 2015]]></title>
    <link href="http://TakahiroHaruyama.github.io/blog/2015/10/15/presentation-at-secure-2015/"/>
    <updated>2015-10-15T17:45:58+09:00</updated>
    <id>http://TakahiroHaruyama.github.io/blog/2015/10/15/presentation-at-secure-2015</id>
    <content type="html"><![CDATA[<p>The Presentation file is <a href="http://www.secure.edu.pl/pdf/2015/D1_1730_A_Haruyama.pdf">here</a>. The content will be helpful if you use openioc_scan and onigiri.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Remote Malware Triage Automation]]></title>
    <link href="http://TakahiroHaruyama.github.io/blog/2015/07/03/remote-malware-triage-automation/"/>
    <updated>2015-07-03T11:06:53+09:00</updated>
    <id>http://TakahiroHaruyama.github.io/blog/2015/07/03/remote-malware-triage-automation</id>
    <content type="html"><![CDATA[<p>I published the script automating remote malware triage with F-Response and openioc_scan.</p>

<!-- more -->


<p>F-Response provides read-only access to the full physical disk(s) of any networked computer. Additionally the physical memory (RAM) of most Microsoft Windows systems can be mounted. We can automate RAM acquisition from remote machine and IOC scan using F-Response COM API. I show the flow of the script.</p>

<p><img src="/images/post/onigiri/onigiri.png" alt="flow" /></p>

<p>The script supports not only a RAM acquisition but also an acuqisition including files with unallocated status (sysreg,userreg,mft,prefetch,evtx,amcache,journal).</p>

<p>We need several preparations (e.g., 3rd party python packages, F-Response configuration, FW rule change) to run the script. For details, check <a href="https://github.com/TakahiroHaruyama/onigiri">the github page</a>. Let me know if any problem, request and bug.</p>

<p><img src="/images/post/onigiri/onigiri_demo2.png" alt="demo" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DFRWS EU Slide Deck and Generic IOCs]]></title>
    <link href="http://TakahiroHaruyama.github.io/blog/2015/03/24/dfrws-eu-slide-deck-and-generic-iocs/"/>
    <updated>2015-03-24T18:55:22+09:00</updated>
    <id>http://TakahiroHaruyama.github.io/blog/2015/03/24/dfrws-eu-slide-deck-and-generic-iocs</id>
    <content type="html"><![CDATA[<p>My talk pdf <em>&ldquo;Fast and Generic Malware Triage Using openioc_scan Volatility Plugin&rdquo;</em> is uploaded to <a href="http://www.slideshare.net/takahiroharuyama5/dfrwseu2015">SlideShare</a>. The code and IOC examples are located in <a href="https://github.com/TakahiroHaruyama/openioc_scan">GitHub</a>. Please let me know if you have any question and request.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OpenIOC Parameters used by openioc_scan]]></title>
    <link href="http://TakahiroHaruyama.github.io/blog/2014/10/24/openioc-parameters-used-by-openioc-scan/"/>
    <updated>2014-10-24T18:09:24+09:00</updated>
    <id>http://TakahiroHaruyama.github.io/blog/2014/10/24/openioc-parameters-used-by-openioc-scan</id>
    <content type="html"><![CDATA[<p>&ldquo;Parameters&rdquo; introduced in OpenIOC 1.1 allows embedding additional metadata about Indicators into the IOC (in more detail, see <a href="https://media.blackhat.com/us-13/Arsenal/us-13-Gibb-IOCWriter_11-Slides.pdf">Blackhat 2013 presentation</a> by William Gibb). I implemented functions displaying matched content details and scoring results of indicator matching.</p>

<!-- more -->


<p>For using the new functions, you should define parameters in <a href="https://github.com/yahoo/PyIOCe">PyIOCe</a> written by Sean Gillespie. First, select [Modify Parameters] in Terms menu. Then add Context Type and Name/Value as below:</p>

<p><img src="/images/post/openioc_parameters/pyIOCe_param_define.JPG" alt="define" /></p>

<p>The Context Type should be lower-case because that of indicator items is &ldquo;volatility&rdquo;.</p>

<p>Next, double-click any terms and add parameters.</p>

<p><img src="/images/post/openioc_parameters/pyIOCe_param_add.JPG" alt="define" /></p>

<p>The value of &ldquo;detail&rdquo; should be &ldquo;on&rdquo;. And you can set any integer value between 0 to 100 for &ldquo;score&rdquo; value. Openioc_scan displays an IOC if the evaluation of all IOC terms/logics is true, or the total score of matched terms including &ldquo;score&rdquo; parameter is greater than or equal to &ldquo;SCORE_THRESHOLD&rdquo; (the default value is 100).</p>

<p>For instance, see the following result.</p>

<p><img src="/images/post/openioc_parameters/pyIOCe_param_result.JPG" alt="result" /></p>

<p>All indicator terms are combined with &ldquo;AND&rdquo; operator, but only 3 terms are matched, so the result without considering &ldquo;score&rdquo; parameter becomes False. However, openioc_scan says &ldquo;IOC matched&rdquo; because the total score is 100. We can check each score per term like &ldquo;(score=50;)&rdquo;. Similarly, we can refer to matched content detail for &ldquo;detail&rdquo; parameter by checking INFO logs above the IOC result.</p>

<p>In this way, OpenIOC parameters enable to define more-informational and flexible IOCs. I will implement more functions using parameters in the future.</p>

<h3>Download</h3>

<p>You can download the script and term/parameter definitions from <a href="http://takahiroharuyama.github.io/blog/2014/08/15/fast-malware-triage-using-openioc-scan-volatility-plugin/">here</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fast Malware Triage using openioc_scan Volatility Plugin]]></title>
    <link href="http://TakahiroHaruyama.github.io/blog/2014/08/15/fast-malware-triage-using-openioc-scan-volatility-plugin/"/>
    <updated>2014-08-15T15:36:26+09:00</updated>
    <id>http://TakahiroHaruyama.github.io/blog/2014/08/15/fast-malware-triage-using-openioc-scan-volatility-plugin</id>
    <content type="html"><![CDATA[<p>Last year, I proposed &ldquo;volatile Indicators of Compromise (IOCs)&rdquo; based on RAM evidence only at <a href="http://digital-forensics.sans.org/summit-archives/DFIR_Summit/Volatile-IOCs-for-Fast-Incident-Response-Haruyama.pdf">SANS DFIR Summit</a>. We can detect malware using them faster than using disk-evidence-based IOCs. Besides, we can define indicators based on not only metadata (e.g., file path) but also malware function (e.g., code injection sign, imported functions and unpacked codes). The IOCs are described according to <a href="http://www.openioc.org/">OpenIOC</a> specification. <a href="http://www.mandiant.com/resources/download/ioc-editor/">IOC Editor</a> is used for defining IOCs and <a href="https://www.mandiant.com/resources/download/redline">Redline</a> is used for scannning IOCs.</p>

<p>Since then, I continued to make volatile IOCs and detect malware through the tools, but I&rsquo;ve got some frustrating problems about them. First, We can&rsquo;t automate IOC scanning for daily task because Redline is a GUI tool. Second, Redline is compliant with OpenIOC 1.0 but the spec doesn&rsquo;t support regular expression, case sensitiveness. In addition, &ldquo;AND&rdquo; combination of different items (e.g., ProcessItem and RegistryItem) does not work. Furthermore, <strong>Redline cannot scan unallocated objects (e.g., dead process, unloaded kernel drivers).</strong> So I decied to make a new tool for volatile IOCs.</p>

<!-- more -->


<h3>openioc_scan Volatility plugin</h3>

<p>I wrote a plugin called &ldquo;openioc_scan&rdquo; for <a href="https://code.google.com/p/volatility/">Volatility Framework</a> that is a open-source memory forensic tool. The plugin supports only Windows Vista or later Windows versions (Linux and Mac OS X are not supported).</p>

<p>To run this plugin, you need to install the following Python modules.</p>

<ul>
<li><a href="https://pypi.python.org/pypi/lxml/3.2.1">lxml</a></li>
<li><a href="https://github.com/mandiant/ioc_writer">ioc_writer</a></li>
<li><a href="https://pypi.python.org/pypi/colorama">colorama</a></li>
</ul>


<p>We also must prepare IOCs for openioc_scan. Openioc_scan accepts only <a href="https://github.com/mandiant/OpenIOC_1.1">OpenIOC 1.1</a> XML files. We can define grep pattern (using &ldquo;matches&rdquo; condition) and case sensitiveness in the version. But unfortunately, Mandiant doesn&rsquo;t provide IOC Editor for the latest version yet. <del>I hope they will publish the updated one. Currently, we should generate IOCs on IOC Editor then convert them into new ones using openioc_10_to_11.py in ioc_writer.</del> <strong>(2014/8/25)</strong> Sean Gillespie distributes open-source IOC editor, <a href="https://github.com/yahoo/PyIOCe">PyIOCe</a>. We can generate OpenIOC 1.1 indicator files using it.</p>

<p>Openioc_scan has several options.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>-p PID, &mdash;pid=PID     Operate on these Process IDs (comma-separated)
</span><span class='line'>  -i IOC_DIR, &mdash;ioc_dir=IOC_DIR&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>                    Location of IOCs directory
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>  -s, &mdash;show            Display IOC definition only
</span><span class='line'>  -c CACHE_PATH, &mdash;cache_path=CACHE_PATH&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>                    Specify the cache folder path of analysis result
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>  -m KMOD, &mdash;kmod=KMOD  Operate on these kernel module names (comma-separated,&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>                    case-insensitive)
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>&ldquo;&mdash;show&rdquo; option just shows the IOCs included in the directory specified by &ldquo;&mdash;ioc_dir&rdquo; option.</p>

<p><img src="/images/post/openioc_scan/show.jpg" alt="show" /></p>

<p>If we run openioc_scan without -s option, the plugin scans the specified memory image using IOCs then display the result.</p>

<p><img src="/images/post/openioc_scan/scan.jpg" alt="scan" /></p>

<p>Openioc_scan generates a cache database for result because some IOC items to scan may take long time. If there are no records about items in cache, openioc_scan outputs &ldquo;[time-consuming task]&rdquo; logs during the scan. Once a cache corresponding to defined items is generated, we can scan the same items rapidly.</p>

<p>For instance, the first run took 2327 secs:</p>

<p><img src="/images/post/openioc_scan/1st_run.jpg" alt="1st_run" /></p>

<p>The second run or later took only 149 secs because of cache db extracted by the 1st run:</p>

<p><img src="/images/post/openioc_scan/2nd_run.jpg" alt="2nd_run" /></p>

<h3>Supported Terms (2015/6/29)</h3>

<p>I show 35 terms supported by openioc_scan. <del>To make maximal use of openioc_scan, we had better newly add some term definitions in Configuration\IOCTerms*.iocterms file of IOC Editor installed folder (for more detail, see IOCe user guide). </del>  <del><strong>(2014/8/25)</strong> We can add new definitions on PyIOCe from Terms->Indicator Terms menu as follows:</del> <strong>(2014/9/30)</strong> Sean added term import/export functions to PyIOCe. You can import the terms for Volatility (download from github) or PyIOCe with all Volatility terms may be released shortly. Thanks Sean!</p>

<p><img src="/images/post/openioc_scan/new_terms.jpg" alt="new_terms" /></p>

<h4>ProcessItem (19 Terms)</h4>

<ul>
<li><strong>ProcessItem/name (string)</strong> &hellip; process name (max 15 characters)</li>
<li><strong>ProcessItem/ParentProcessName (string)</strong> &hellip; process name of the parent process</li>
<li><strong><del>ProcessItem/path (string)</del></strong> &hellip; <del>path in the command line of process</del> (replaced by ProcessItem/cmdLIne)</li>
<li><strong>ProcessItem/cmdLine (string)</strong> &hellip; process command line</li>
<li><strong>ProcessItem/DllPath (string)</strong> &hellip; dll path loaded in process (base on <em>ldrmodules</em> command)</li>
<li><strong>ProcessItem/DllHidden (bool, should be &ldquo;true&rdquo; or &ldquo;false&rdquo;)</strong> &hellip; dll hidden from all PEB linked lists (e.g., InLoadOrderModuleList) in process (base on <em>ldrmodules</em> command)</li>
<li><strong><del>ProcessItem/arguments (string)</del></strong> &hellip; <del>command line arguments</del> (replaced by ProcessItem/cmdLIne)</li>
<li><strong>ProcessItem/hidden (bool)</strong> &hellip; process hidden by rootkit (e.g., DKOM). This item is based on part of <em>psxview</em> command, but dead process with exit time is excluded before evaluation.</li>
<li><strong>ProcessItem/SectionList/MemorySection/Injected (bool)</strong> &hellip; process with potential section of injected or unpacked code based on <em>malfind</em> command</li>
<li><strong>ProcessItem/SectionList/MemorySection/InjectedHexPattern (string)</strong> &hellip; process with potential section of injected or unpacked code with specified hex pattern based on <em>malfind</em> command (matches condition only)</li>
<li><strong>ProcessItem/StringList/string (string)</strong> &hellip; strings or binary code sequences in the process</li>
<li><strong>ProcessItem/SectionList/MemorySection/PEInfo/ImportedModules/Module/ImportedFunctions/string (string)</strong> &hellip; imported function names based on <em>impscan</em>. The original command scans only base+SizeOfImage of the executable, so I added code-injected sections and DLLs with suspicious paths (e.g., &ldquo;\$Recycle.Bin&rdquo;) as scan target. This item doesn&rsquo;t work on wow64 process due to impscan&rsquo;s limitation.</li>
<li><strong>ProcessItem/HandleList/Handle/Name (string), ProcessItem/HandleList/Handle/Type (string)</strong> &hellip; process handle information based on <em>handles</em> command</li>
<li><strong>ProcessItem/PortList/PortItem/localPort (integer), ProcessItem/PortList/PortItem/remotePort (integer), ProcessItem/PortList/PortItem/localIP (string), ProcessItem/PortList/PortItem/remoteIP (string)</strong> &hellip; network information related to the process from the result of <em>netscan</em> command</li>
<li><strong>ProcessItem/Hooked/API/FunctionName (string)</strong> &hellip; IAT/EAT/Inline hooked API function name based on <em>apihooks</em> command</li>
<li><strong>ProcessItem/Hooked/API/HookingModuleName (string)</strong> &hellip; IAT/EAT/Inline hooking module name based on <em>apihooks</em> command</li>
<li><strong>ProcessItem/EnabledPrivilege/Name (string)</strong> &hellip; explicitly enabled privilege name extracted from <em>privs</em> command (e.g., SeDebugPrivilege)</li>
</ul>


<h4>RegistryItem (2 Terms)</h4>

<ul>
<li><strong><del>RegistryItem/Path (string)</del></strong> &hellip; <del>registry key or value paths based on <em>hivelist&amp;printkey</em>. It&rsquo;s too slow, so I recommend to use handle names instead. For example, it takes 12 hours in 512MB RAM :&ndash;(</del> (disabled)</li>
<li><strong>RegistryItem/ShimCache/ExecutablePath (string)</strong> &hellip; exe/dll/bat file paths included in <em>shimcache</em> artifact</li>
</ul>


<h4>ServiceItem (3 Terms)</h4>

<ul>
<li><strong>ServiceItem/name (string)</strong> &hellip; service name</li>
<li><strong>ServiceItem/descriptiveName (string)</strong> &hellip; service description name</li>
<li><strong>ServiceItem/cmdLine (string)</strong> &hellip; command line of the service</li>
</ul>


<h4>DriverItem (6 Terms)</h4>

<ul>
<li><strong>DriverItem/DriverName (string)</strong> &hellip; kernel driver name extracted from <em>lsmod</em> method (to be improved in the future)</li>
<li><strong>DriverItem/PEInfo/ImportedModules/Module/ImportedFunctions/string (string)</strong> &hellip; imported function names based on <em>impscan</em></li>
<li><strong>DriverItem/StringList/string (string)</strong> &hellip; strings or binary code sequences in the driver</li>
<li><strong>DriverItem/IRP/HookingModuleName (string)</strong> &hellip; kernel module name hooking IRP major function table (e.g., rootkit hooking IRP_MJ_DEVICE_CONTROL in tcpip.sys), based on <em>driverirp</em> command</li>
<li><strong>DriverItem/CallbackRoutine/Type (string)</strong> &hellip; kernel callback function type from <em>callbacks</em> command</li>
<li><strong>DriverItem/TimerRoutineIncluded (bool)</strong> &hellip; the kernel module includes kernel timer functions or not</li>
</ul>


<h4>HookItem (1 Term)</h4>

<ul>
<li><strong>HookItem/SSDT/HookedFunctionName (string)</strong> &hellip; hooked system call function name in SSDT (e.g., NtQueryDirectoryFile)</li>
</ul>


<h4>FileItem (5 Terms)</h4>

<ul>
<li><strong> FileItem/FileName (string)</strong> &hellip; file name extracted by <em>mftparser</em></li>
<li><strong> FileItem/FileExtension (string)</strong> &hellip; file extension extracted by <em>mftparser</em></li>
<li><strong> FileItem/INode (integer)</strong> &hellip; MFT entry number extracted by <em>mftparser</em></li>
<li><strong> FileItem/FullPath (string)</strong> &hellip; file path extracted by <em>mftparser</em></li>
<li><strong> FileItem/SizeInBytes (integer)</strong> &hellip; file size extracted by <em>mftparser</em></li>
</ul>


<h3>Examples</h3>

<p>Using openioc_scan, we can detect malware based on our own rules. I show some examples for detecting PlugX type II/III and WebInject malware. About PlugX, see this <a href="https://www.blackhat.com/docs/asia-14/materials/Haruyama/Asia-14-Haruyama-I-Know-You-Want-Me-Unplugging-PlugX.pdf">presentation</a>. Actually, all IOCs are generic indicators, so they can be applied to other malware.</p>

<p>rogue svchost:</p>

<p><img src="/images/post/openioc_scan/ex_svchost.jpg" alt="examples1" /></p>

<p>unusual executable paths:</p>

<p><img src="/images/post/openioc_scan/ex_iron.jpg" alt="examples2" /></p>

<p>malware bypassing UAC pop-up:</p>

<p><img src="/images/post/openioc_scan/ex_uac.jpg" alt="examples3" /></p>

<p>WebInject malware (e.g., ZeuS and its variants):</p>

<p><img src="/images/post/openioc_scan/webinject.jpg" alt="examples4" /></p>

<h3>Future Work</h3>

<p>I will support <del>dead process</del> / unloaded  or hidden driver terms in the future. <del>I will also consider the term about auto-startup entries (e.g., registry Run keys) extracted from RAM.</del> <del>Scoring function using OpenIOC parameters may be implemented.</del></p>

<p>Any comments or feedback are welcome.</p>

<h3>Download</h3>

<p>I made the <a href="https://github.com/TakahiroHaruyama/openioc_scan">repository for openioc_scan</a>. you can download the code, example IOCs and PyIOCe volatility terms/parameters from there.</p>

<p>You can use the plugin by just copying it into volatility\plugins\malware folder. I checked it worked on Volatility 2.4 and 2.3.1.</p>

<p>Let me know if you have any question or problem. Enjoy ;&ndash;)</p>
]]></content>
  </entry>
  
</feed>
