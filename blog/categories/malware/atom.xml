<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Malware | CCI]]></title>
  <link href="http://TakahiroHaruyama.github.io/blog/categories/malware/atom.xml" rel="self"/>
  <link href="http://TakahiroHaruyama.github.io/"/>
  <updated>2014-04-02T17:33:37+09:00</updated>
  <id>http://TakahiroHaruyama.github.io/</id>
  <author>
    <name><![CDATA[Takahiro Haruyama (@cci_forensics)]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ID/IDAPython scripts extracting PlugX configs]]></title>
    <link href="http://TakahiroHaruyama.github.io/blog/2014/03/27/id-slash-idapython-scripts-extracting-plugx-configs/"/>
    <updated>2014-03-27T00:00:00+09:00</updated>
    <id>http://TakahiroHaruyama.github.io/blog/2014/03/27/id-slash-idapython-scripts-extracting-plugx-configs</id>
    <content type="html"><![CDATA[<p>I release Immunity Debugger and IDAPython scirpts dumping PlugX configs (and original PEs) then parsing them.</p>

<!-- more -->


<p>IIJ-SECT (CSIRT team at IIJ, Inc.) classifies PlugX samples into 3 types: type I/II/III. In more detail, check <a href="https://www.blackhat.com/asia-14/briefings.html#Haruyama">our presentation</a>.
The Immunity Debugger script can be used for PlugX type I&amp;II. The IDAPython script can parse type III configs.</p>

<h3>Distinction between Type I&amp;II and III</h3>

<p>Before using the scripts, we should guess which type the PlugX specimen is. Generally, type I/II injects their codes twice: the 1st target process defined in the config and msiexec. The 1st target process may be svchost/msiexec/iexplore/winlogon like the following figures. However, some samples don&rsquo;t inject according to the config (stand-alone flag), additionally, other several specimens inject only once. So, the criteria is ambiguous. Moreover, in my experience, Type III is usually executed by rundll32.</p>

<p><img src="/images/post/plugx_scripts/type_diff_process.PNG" alt="type_diff_process" /></p>

<h3>ID Script for Type I&amp;II</h3>

<p>We need to copy the ID script into PyCommands folder in advance. Then we attach to one of injected processes. After attaching to the process, run the script (!plugx_dumper). If successful, the parsed config is displayed in Log View. The result and decompressed original PE file are saved in the same folder.</p>

<p><img src="/images/post/plugx_scripts/ID_result.PNG" alt="ID_result" /></p>

<p>If the following message is output, the specimen may be neither type I nor II.</p>

<p><img src="/images/post/plugx_scripts/ID_failed.png" alt="ID_failed" /></p>

<h3>IDAPython Script for Type III</h3>

<p>Since type III variants are more obfuscated (e.g., massive obfuscated strings, inserted random junk codes), it&rsquo;s difficult to extract the config from process memory. Therefore, I wrote an IDAPython script for parsing type III configs.</p>

<p>To use the script, we must find the function to decode obfuscated strings and set it as decode_function_name in the script. It may be an obstacle for DFIR people not reverse-engineering malware.</p>

<p><img src="/images/post/plugx_scripts/IDA_prepare.PNG" alt="IDA_prepare" /></p>

<p>After the configuration, run the script. We can check the result in Output window. Parsed config information is saved as &ldquo;config.txt&rdquo;.</p>

<p><img src="/images/post/plugx_scripts/IDA_result.PNG" alt="IDA_result" /></p>

<h3>Note: Demo Version</h3>

<p>PlugX demo specimens (some demo samples pop-up &ldquo;THIS IS A DEMO VERSION!!!&rdquo;, others not) do not include config data. When detecting the specimen is demo version, the scripts notify us of the result like this. The configs are filled by &ldquo;XXXX&rdquo; in demo samples.</p>

<p><img src="/images/post/plugx_scripts/Demos.PNG" alt="Demos" /></p>

<h3>Download</h3>

<ul>
<li><a href="/downloads/scripts/plugx_dumper.py">Immunity Debugger script for type I&amp;II</a> (Supported config sizes are 0x150C/0x1510/0x1B18/0x1D18/0x2540/0x7AC#2)</li>
<li><a href="/downloads/scripts/plugx_config_dumper_IDA.py">IDAPython script for type III</a> (Supported config sizes are 0x72C/0x76C/0xDF0/0x7AC/0x840)</li>
</ul>


<p><strong>2014/4/2 updated</strong></p>

<p>Immunity Debugger script output improved and 0x7AC config added (thanks to You Nakatsuru/Arai)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PlugX Builder/Controller (Type III, 0x840)]]></title>
    <link href="http://TakahiroHaruyama.github.io/blog/2014/03/12/plugx-builder-slash-controller/"/>
    <updated>2014-03-12T19:44:27+09:00</updated>
    <id>http://TakahiroHaruyama.github.io/blog/2014/03/12/plugx-builder-slash-controller</id>
    <content type="html"><![CDATA[<p>Recently, I acquired a PlugX builder/controller. This seems to be the same as the one referred in <a href="http://image.ahnlab.com/global/upload/download/documents/1401223631603288.pdf">AhnLab&rsquo;s APT attacks analysis report</a>, judging from the GUI window. I tried to use it.</p>

<!-- more -->


<p>This PlugX version (we call it &ldquo;TypeIII&rdquo;) supports custom DNS servers.</p>

<p><img src="/images/post/plugx_dns.PNG" alt="plugx_dns" /></p>

<p>The service information like service(or dll) name and service description is simpler than Type I/II.</p>

<p><img src="/images/post/PlugX_ServiceInfo.PNG" alt="PlugX_ServiceInfo" /></p>

<p>The controller also provides online status of victims.</p>

<p><img src="/images/post/PlugX_online.PNG" alt="PlugX_online" /></p>

<h3>Why two &ldquo;Build&rdquo; buttons?</h3>

<p>The funny thing is that there are two kinds of &ldquo;build&rdquo; buttons in this builder.
That&rsquo;s because type III specimens merge C2 setting, C2 setting URL (which is the location of DZKS/DZJS encoded file/text), proxy setting into 1 structure.</p>

<p>C2 setting tab</p>

<p><img src="/images/post/PlugX_C2Setting.PNG" alt="PlugX_C2Setting" /></p>

<p>C2 setting URL tab</p>

<p><img src="/images/post/PlugX_C2SettingURL.PNG" alt="PlugX_C2SettingURL" /></p>

<p>The built sample includes only either C2 setting or C2 setting URL. If you build in C2Setting tab, the sample includes only C2Setting information, vice versa. The size is fixed 0x840 bytes.</p>

<p><img src="/images/post/PlugX_parsedConfig.PNG" alt="PlugX_parsedConfig" /></p>

<p>The config parser will be released after <a href="https://www.blackhat.com/asia-14/briefings.html#Haruyama">Black Hat Asia 2014 conference</a> (I will also explain type I/II/III behavior, besides, co-author Hiroshi Suzuki will show the relationships between PlugX samples and attack groups)</p>

<h3>Supported Commands</h3>

<p>And once connected by a victim, I can open the command window.</p>

<p><img src="/images/post/PlugX_commands.PNG" alt="PlugX_commands" /></p>

<p>I&rsquo;m surprised RAT version is different from the controller version.</p>

<p>The supported commands and functions are:</p>

<ul>
<li>Disk Management</li>
<li>File Transfer</li>
<li>Process Management</li>
<li>Service Management</li>
<li>Registry Management</li>
<li>Screenshot</li>
<li>Remote Control</li>
<li>DOS command</li>
<li>Port Mapping</li>
<li>Keylogger</li>
<li>Local Log</li>
<li>Remote log</li>
</ul>


<h3>The hash values</h3>

<p>SHA256=de7a97efe1fd0aff0a90f703becc9162124ee86901a1ad57bcf5d2884c2235d2
MD5=b4d8bfb56accbd17514bffc1fa8e1953</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Some Old Stuffs]]></title>
    <link href="http://TakahiroHaruyama.github.io/blog/2014/01/05/some-old-stuffs/"/>
    <updated>2014-01-05T23:37:20+09:00</updated>
    <id>http://TakahiroHaruyama.github.io/blog/2014/01/05/some-old-stuffs</id>
    <content type="html"><![CDATA[<h3>IOCs for memory forensics</h3>

<p>Never forget to configure &ldquo;advanced parameters&rdquo; (check String and the length is 4)</p>

<ul>
<li><a href="/downloads/IOCs/23592725-e7cb-4391-9148-2ce25b1ed00d.ioc">ZeroAccess</a> for kernel/user-mode variants</li>
<li><a href="/downloads/IOCs/66132886-d06c-4612-b51d-031a1c9fbc30.ioc">Poison Ivy</a></li>
<li><a href="/downloads/IOCs/c229d84e-3981-4c71-a16f-aa6a17b22c75.ioc">Zeus 2.x variants</a> including Citadel</li>
<li><a href="/downloads/IOCs/42392189-6ef8-4869-bb2e-b457c3e05ba1.ioc">SpyEye 1.3.x</a></li>
</ul>


<h3>IDAPython script</h3>

<ul>
<li><a href="/downloads/scripts/Deobfuscating_SpyEye.zip">Deobfuscating_SpyEye</a> deobfuscate 4-byte hash values and strings</li>
<li><a href="/downloads/scripts/zeus_string_decoder.py">zeus_string_decoder</a> decode strings in ZeuS binary</li>
<li><a href="/downloads/scripts/fix_junk_pony.py">fix_junk_pony</a> modify PONY&rsquo;s junk code</li>
</ul>


<h3>Immunity Debugger script</h3>

<ul>
<li><a href="/downloads/scripts/immbone_nx.zip">immbone_nx</a> break on execute script on DEP environment (enable DEP and uncheck the option ignoring Memory access violation in the debugger settings)</li>
<li><a href="/downloads/scripts/immbone.zip">immbone</a> break on execute script on non-DEP environment (disable DEP and uncheck the option ignoring single-step break in the debugger settings)</li>
<li><a href="/downloads/scripts/blackmanta.py">blackmanta</a> slightly-changed version for Immunity Debugger v1.8</li>
</ul>


<h3>EnCase EnScript</h3>

<ul>
<li><a href="/downloads/scripts/CrashDumpAnalyzer_20110322.zip">CrashDumpAnalyzer</a> memory forensic EnScripts for MS crash dump</li>
<li><a href="/downloads/scripts/RawImageAnalyzer_20110322.zip">RawImageAnalyzer</a> memory forensic EnScripts for raw memory dump</li>
<li><a href="/downloads/scripts/Timeline_Report_v1.8.1_CCI_20120511.zip">Timeline_Report_v1.8.1_CCI</a> NTFS SI/FN timeline EnScript based on Geoff Black&rsquo;s timeline EnScript</li>
<li><a href="/downloads/scripts/PFDCforPE.EnScript">PFDCforPE</a> parse/filter/detect/carve PE files</li>
</ul>


<h3>Others</h3>

<ul>
<li><a href="/downloads/scripts/amf_7x86.c">amf_7x86</a> PoC driver for anti memory forensics on Windows7</li>
<li><a href="/downloads/scripts/amf_XPx86.c">amf_XPx86</a> PoC driver for anti memory forensics on WindowsXP</li>
</ul>


<!-- * [](downloads/scripts/) -->

]]></content>
  </entry>
  
</feed>
